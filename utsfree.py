# -*- coding: utf-8 -*-
"""jurnal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17SvwKPQPk1Wk5zxyPndsVqWYCDP2Cs_o
"""

import streamlit as st
import collections
import math
import random
def vigenere_encrypt(plain_text, key):
    encrypted_text = ""
    key_length = len(key)
    for i in range(len(plain_text)):
        char = chr((ord(plain_text[i]) + 1) % 256)
        key_char = key[i % key_length]
        encrypted_char = chr((ord(char) + ord(key_char)) % 256)
        # encrypted_char = chr((ord(char) + ord(key_char) + random.randint(0, 255)) % 256)
        encrypted_text += encrypted_char
    return encrypted_text

def vigenere_decrypt(cipher_text, key):
    decrypted_text = ""
    key_length = len(key)
    for i in range(len(cipher_text)):
        char = cipher_text[i]
        key_char = key[i % key_length]
        decrypted_char = chr((ord(char) - ord(key_char) - 1) % 256)
        decrypted_text += decrypted_char
    return decrypted_text


def calculate_ber(original_text, decrypted_text):
    if len(original_text) != len(decrypted_text):
        raise ValueError("Panjang teks asli dan teks terdekripsi harus sama")

    num_errors = sum(1 for a, b in zip(original_text, decrypted_text) if a != b)
    ber = num_errors / len(original_text)
    return ber

def calculate_cer(original_text, decrypted_text):
    if len(original_text) != len(decrypted_text):
        raise ValueError("Panjang teks asli dan teks terdekripsi harus sama")

    num_errors = sum(1 for a, b in zip(original_text, decrypted_text) if a != b)
    cer = num_errors / len(original_text)
    return cer

def calculateCharacterFrequency(text):
    frequencyMap = collections.defaultdict(int)

    for c in text:
        frequencyMap[c] += 1

    return frequencyMap

def calculate_entropy(cipher_text):
    text_length = len(cipher_text)
    character_counts = calculateCharacterFrequency(cipher_text)

    entropy = 0
    for count in character_counts.values():
        probability = count / text_length
        entropy -= probability * math.log2(probability) if probability > 0 else 0

    return entropy


def calculate_avalanche_effect(original_text, cipher_text):
    if len(original_text) != len(cipher_text):
        raise ValueError("Panjang teks asli dan teks terdekripsi harus sama")

    total_bits = len(original_text) * 8  # Assuming 8 bits per character

    different_bits = sum(bin(ord(a) ^ ord(b)).count('1') for a, b in zip(original_text, cipher_text))

    avalanche_effect = (different_bits / total_bits) * 100
    return avalanche_effect



# Contoh penggunaan
original_text = st.text_input('Enter the message: ')  # Teks asli
key = st.text_input('Enter the key: ')   # Kunci Vigenere
cipher_text = vigenere_encrypt(original_text, key)  # Enkripsi teks asli
decrypted_text = vigenere_decrypt(cipher_text, key)  # Dekripsi teks terenkripsi


ber = calculate_ber(original_text, decrypted_text)
cer = calculate_cer(original_text, decrypted_text)
avalanche_effect = calculate_avalanche_effect(original_text, cipher_text)
entropy = calculate_entropy(cipher_text)
ber_str = str(int(ber * 100))
cer_str = str(int(cer * 100))
avalanche_effect_str = f"{avalanche_effect:.2f}"

if st.button('Enkripsi/Dekripsi', type="primary"):
    st.write(f'Teks Asli: {original_text}')
    st.write(f'Teks Terenkripsi: {cipher_text}')
    st.write(f'Teks Terdekripsi: {decrypted_text}')
    st.write(f'Bit Error Rate (BER): {ber_str}')
    st.write(f'Character Error Rate (CER): {cer_str}')
    st.write(f'Avalanche Effect: {avalanche_effect_str}%')
    st.write('Lakukan Enkripsi dan Dekripsi')
    st.write(f"Entropy of Encrypted Text: {entropy:.4f} bits per character")

else:
    st.write('Lakukan Enkripsi dan Dekripsi')


